# Alpha Version of the FLASK DATASTORE GNIB VISA CHECKER! :-{import loggingimport osimport requestsimport jsonimport timeimport mailjet_restimport datetimefrom google.cloud import datastorefrom flask import Flaskfrom flask import requestfrom flask import url_forfrom flask import redirectfrom flask import render_templatefrom requests.packages.urllib3.exceptions import InsecureRequestWarningrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)app = Flask(__name__)# [Constans]MAILJET_API_KEY = os.environ['MAILJET_API_KEY']MAILJET_API_SECRET = os.environ['MAILJET_SECRET_KEY']MAILJET_SENDER = os.environ['MAILJET_SENDER']VISA_RANGE = 25GNIB_RANGE = 25VISA_UPDATE_URL = 'https://reentryvisa.inis.gov.ie/website/INISOA/IOA.nsf/(getApps4DT)?openagent&dt={}/{}/{}&type=I&num=1'GNIB_UPDATE_URL = 'https://burghquayregistrationoffice.inis.gov.ie/Website/AMSREG/AMSRegWeb.nsf/(getApps4DT)?openagent&dt=' \           '{}/{}/{}&cat=Work&sbcat=All&typ=Renewal'VISA_HOST = 'reentryvisa.inis.gov.ie'GNIB_HOST = 'burghquayregistrationoffice.inis.gov.ie'TOMORROW = datetime.date.today() + datetime.timedelta(days=1)HEADERS = {  'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko)  Chrome/52.0.2743.116 Safari/537.36',  'Connection': 'keep-alive',  'Upgrade-Insecure-Requests': '1',  'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',  'Accept-Language': 'en-US,en;q=0.8,ru;q=0.6,pl;q=0.4,de;q=0.2,uk;q=0.2,it;q=0.2',}# [API objects]datastore_api_client = datastore.Client(os.environ['GCLOUD_PROJECT'])def make_header(header, type):  if type == 'gnib':    header['host'] = 'burghquayregistrationoffice.inis.gov.ie'    return header  elif type == 'visa':    header['host'] = 'reentryvisa.inis.gov.ie'    return header  else:    print 'the hosttype is not recognized'def send_email(to, subject, body):  client = mailjet_rest.Client(    auth=(MAILJET_API_KEY, MAILJET_API_SECRET))  data = {    'FromEmail': MAILJET_SENDER,    'FromName': 'Visa-GNIB.info',    'Subject': subject,    'Text-part': body,    'Recipients': [{'Email': to}]  }  result = client.send.create(data=data)  return result.json()#app.add_url_rule('/test', 'test', visa_page)@app.route('/')def visa_page():  if request.method == 'GET':    query = datastore_api_client.query(kind='AppointmentSlot', order=('date',))    query.add_filter('type', '=', 'visa')    return render_template('Visa_template.html', slots=query.fetch())@app.route('/gnib')def gnib_page():  if request.method == 'GET':    query = datastore_api_client.query(kind='AppointmentSlot', order=('date',))    query.add_filter('type', '=', 'gnib')    #results = query.fetch()    return render_template('GNIB_template.html', slots=query.fetch())@app.route('/notification_request', methods=['GET', 'POST'])def notification_request():  if request.method == 'GET':    print('GET on notification_request page')    return render_template('notification_request.html')  if request.method == 'POST':    # Create a key for Notification type entity    notification_key = datastore_api_client.key('Notification')    # Create that entity    notification_entity = datastore.entity.Entity(notification_key)    # Add values into entity    notification_entity['email'] = request.form['email']    notification_entity['type'] = request.form['type'].lower()    notification_entity['date_start'] = datetime.datetime.strptime(request.form['date_start'], "%Y-%m-%d %H:%M")    notification_entity['date_end'] = datetime.datetime.strptime(request.form['date_end'], "%Y-%m-%d %H:%M")    # Put entity into the datastore    datastore_api_client.put(notification_entity)    # Redirect to the page    return redirect(url_for('notification_request'))@app.route('/notification_check', methods=['GET'])def notification_check():  #fn that is invoked by the cron job to send notifications about new slots for the notification  if request.method == 'GET':    print('Cron - GET on notification_check page ')    query = datastore_api_client.query(kind='Notification')    query.keys_only()    query_result_keys = [entity.key for entity in query.fetch()]    for key in query_result_keys:      notification = datastore_api_client.get(key)      query = datastore_api_client.query(kind='AppointmentSlot')      query.add_filter('type', '=', notification['type'].lower())      query.add_filter('slot', '>=', notification['date_start'])      query.add_filter('slot', '<=', notification['date_end'])      list_of_results = [dict(entity) for entity in query.fetch()]      print (list_of_results)      if len(list_of_results) > 0:        print ('result is true')        # send email        body = "Hi! There are a new appointment slots for {} : \n".format(notification['type'])        for slot in list_of_results:          print slot          body += "{}\n".format(slot['slot'])        body += "Register here: {} ".format(VISA_HOST if notification['type'] == "visa" else GNIB_HOST)        response = send_email(to=notification['email'],                              subject="New {} Appointment".format(notification['type']),                              body=body                              )        print (response)        #delete the notification object from datastore        datastore_api_client.delete(key)        print ('appointment was deleted')      else:        logging.info("Appointment not found")        print('appointments not found for:')        print(notification)  return 'OK', 200@app.route('/update')def update_dev():  #expects url :/update_dev?days=20&type=Visa  days = int(request.args.get('days'))  type = request.args.get('type')  if request.method == 'GET':    for counter in range(days, GNIB_RANGE + days):      date_obj = datetime.datetime.combine(TOMORROW + datetime.timedelta(days=counter), datetime.time())      datastore_api_query = datastore_api_client.query(kind='AppointmentSlot')      datastore_api_query.add_filter('type', '=', type)      datastore_api_query.add_filter('date', '=', date_obj)      query_results = datastore_api_query.fetch()      keys_to_delete = [k.key for k in query_results]      datastore_api_client.delete_multi(keys_to_delete)      #[Request parameters setup]      day = str(date_obj)[8:10]      month = str(date_obj)[5:7]      year = str(date_obj)[0:4]      url = GNIB_UPDATE_URL if type == 'gnib' else VISA_UPDATE_URL      url = url.format(day, month, year)      print str(counter) + ' | requested date = ' + str(date_obj)      # make request      response = requests.get(url, headers=make_header(HEADERS, type), verify=False)      response_json = json.loads(response.text)      # processing results      if "empty" not in response.text:        # Slots in the response        slots_of_that_day = list(set(datetime.datetime.strptime(slot['time'], "%d/%m/%Y %I:%M %p") for slot in response_json["slots"]))        print slots_of_that_day        for slot in slots_of_that_day:          appointmentSlot_key = datastore_api_client.key('AppointmentSlot')          appointmentSlot_entity = datastore.entity.Entity(appointmentSlot_key)          appointmentSlot_entity['date'] = date_obj          appointmentSlot_entity['type'] = type          appointmentSlot_entity['slot'] = slot          datastore_api_client.put(appointmentSlot_entity)      else:        # empty in the response        print 'no slots'      # wait for 0.1 sec between each requests - not to ddos :)      time.sleep(0.2)  return 'OK', 200@app.route('/test_email')def test_email():  email = request.args.get('email')  send_email(email, 'test', 'test')  return 'ok', 200@app.errorhandler(500)def server_error(e):  logging.exception('An error occurred during a request.')  return """    An internal error occurred: <pre>{}</pre>    See logs for full stacktrace.    """.format(e), 500@app.errorhandler(404)def page_not_found(error):    return render_template('404.html')if __name__ == '__main__':  # This is used when running locally. Gunicorn is used to run the  # application on Google App Engine. See entrypoint in app.yaml.  app.run(host='127.0.0.1', port=8080, debug=True)# [END app]