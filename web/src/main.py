# Beta Version of the FLASK DATASTORE GNIB VISA CHECKER! :-{import datetimefrom os import pathfrom os import environfrom retrying import retryfrom flask import Flask, url_for, send_from_directory, request, render_template, redirectfrom flask_sqlalchemy import SQLAlchemyfrom utils import create_auto_submission, datastore_api_clientfrom google.cloud import datastoreapp = Flask(__name__)app.config['SQLALCHEMY_DATABASE_URI'] = environ['SQLALCHEMY_DATABASE_URI']db = SQLAlchemy(app)class NotificationRequest(db.Model):    __tablename__ = 'NotificationRequest'    id = db.Column('id', db.Integer, primary_key=True)    created_timestamp = db.Column(db.DateTime)    email = db.Column(db.String(80))    appointment_type = db.Column(db.Text)    status = db.Column(db.Text)    def __init__(self, email, appointment_type, notif_status, created_timestamp=None, ):        self.email = email        self.appointment_type = appointment_type        self.notif_status = notif_status        if created_timestamp is None:            created_timestamp = datetime.datetime.utcnow()        self.created_timestamp = created_timestamp@app.route('/')@retry(stop_max_attempt_number=10)def visa_page():    if request.method == 'GET':        query = datastore_api_client.query(kind='AppointmentSlot', order=('slot',))        query.add_filter('appointment_type', '=', 'visa')        slots = [str(entity['slot'].strftime("%d-%m-%Y %H:%M")) for entity in query.fetch()]        slots = set(slots)  # Remove duplicates        return render_template('visa_template.html', template_values=slots)    elif request.method == 'HEAD':        return 'OK', 200@app.route('/gnib')@retry(stop_max_attempt_number=10)def gnib_page():    if request.method == 'GET':        query = datastore_api_client.query(kind='AppointmentSlot', order=('slot',))        query.add_filter('appointment_type', '=', 'gnib')        slots = [str(entity['slot'].strftime("%d-%m-%Y %H:%M")) for entity in query.fetch()]        return render_template('gnib_template.html', template_values=set(slots))@app.route('/notification_request', methods=['GET', 'POST'])@retry(stop_max_attempt_number=10)def notification_request():    if request.method == 'GET':        return redirect(url_for('visa_page'), 302)    elif request.method == 'POST':        form = request.form        # Create a key for Notification type entity        notification_key = datastore_api_client.key('Notification')        # Create that entity        notification_entity = datastore.entity.Entity(notification_key)        # Add values into entity        notification_entity['email'] = form['email']        notification_entity['appointment_type'] = form['appointment_type'].lower()        notification_entity['date_start'] = datetime.datetime.strptime(form['date_start'], "%d-%m-%Y %H:%M")        notification_entity['date_end'] = datetime.datetime.strptime(form['date_end'], "%d-%m-%Y %H:%M")        datastore_api_client.put(notification_entity)        # values for the template rendering        template_values = {'email': form['email'],                           'appointment_type': form['appointment_type'],                           'date_start': form['date_start'],                           'date_end': form['date_end'],                           'notification_id': notification_entity.key.id}        # Update the notif table in db        new_notif = NotificationRequest(email=form['email'],                                        appointment_type=form['appointment_type'],                                        notif_status='Created')        print ('new notif created')        db.session.add(new_notif)        db.session.commit()        return render_template('notification_request_confirmation.html', template_values=template_values)@app.route('/auto_submission', methods=['GET', 'POST'])@retry(stop_max_attempt_number=10)def auto_submission_page():    if request.method == 'GET':        return render_template('auto_submission.html')    elif request.method == 'POST':        template_values = create_auto_submission(request)        if template_values:            return render_template('auto_submission_request_confirmation.html', template_values=template_values)        else:            return 'Sorry Bad request, please try once again', 400@app.route('/donate')@retry(stop_max_attempt_number=10)def donate_page():    return render_template('donate_page.html')@app.route('/favicon.ico')def favicon():    return send_from_directory(path.join(app.root_path, 'static'),                               'favicon.ico', mimetype='image/vnd.microsoft.icon')@app.route('/version')def version():    version_env = environ['VERSION']    print (version_env)    return version_env, 200@app.errorhandler(404)def page_not_found(e):    print (e)    return render_template('404.html'), 404if __name__ == "__main__":    app.run(host='0.0.0.0', debug=True, port=80)